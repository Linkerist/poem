# BLANK LINES OPTIONS

menuconfig BLANK_LINES_OPTIONS
	bool "BLANK LINES"
	default y
	---help---
	  BLANK LINES
	  
	  Various programming styles use blank lines in different places.	poem has a number of options to insert or delete blank lines in specific places.

	  The "-bad" option causes poem to force a blank line after every block of declarations.  The "-nbad" option causes poem not to force such blank lines.

	  The "-bap" option forces a blank line after every procedure body.  The "-nbap" option forces no such blank line.

	  The "-bbb" option forces a blank line before every boxed comment (See COMMENTS.)  The "-nbbb" option does not force such blank lines.

	  The "-sob" option causes poem to swallow optional blank lines (that is, any optional blank lines present in the input will be removed	from  the  output). If the "-nsob" is specified, any blank lines present in the input file will be copied to the output file.
	  
	  --blank-lines-after-declarations
	  
	  The "-bad" option forces a blank line after every block of declarations.  The "-nbad" option does not add any such blank lines.

	  For example, given the input
	    char *foo;
	    char *bar;
	    /* This separates blocks of declarations.  */
	    int baz;

	  poem -bad produces

	    char *foo;
	    char *bar;

	    /* This separates blocks of declarations.  */
	    int baz;

	  and poem -nbad produces

	    char *foo;
	    char *bar;
	    /* This separates blocks of declarations.  */
	    int baz;

	  --blank-lines-after-procedures
	  
	  The "-bap" option forces a blank line after every procedure body.

	  For example, given the input

	    int
	    foo ()
	    {
	      puts("Hi");
	    }
	    /* The procedure bar is even less interesting.  */
	    char *
	    bar ()
	    {
	      puts("Hello");
	    }

	  poem -bap produces

	    int
	    foo ()
	    {
	      puts ("Hi");
	    }

	    /* The procedure bar is even less interesting.  */
	    char *
	    bar ()
	    {
	      puts ("Hello");
	    }

	  and poem -nbap produces

	    int
	    foo ()
	    {
	      puts ("Hi");
	    }
	    /* The procedure bar is even less interesting.  */
	    char *
	    bar ()
	    {
	      puts ("Hello");
	    }

	  No blank line will be added after the procedure foo.

if BLANK_LINES_OPTIONS

	config BLANK_LINES_AFTER_DECLARATIONS
		bool "--blank-lines-after-declarations"
		default y
		---help---
		  -bad, --blank-lines-after-declarations
		  Force blank lines after the declarations.

	config BLANK_LINES_AFTER_PROCEDURES
		bool "--blank-lines-after-procedures"
		default y
		---help---
		  -bap, --blank-lines-after-procedures
		  Force blank lines after procedure bodies.

	config BLANK_LINES_BEFORE_BLOCK_COMMENTS
		bool "--blank-lines-before-block-comments"
		---help---
		  -bbb, --blank-lines-before-block-comments
		  Force blank lines before block comments.

	config NO_BLANK_LINES_AFTER_DECLARATIONS
		bool "--no-blank-lines-after-declarations"
		---help---
		  -nbad, --no-blank-lines-after-declarations
		  Do not force blank lines after declarations.

	config NO_BLANK_LINES_AFTER_PROCEDURES
		bool "--no-blank-lines-after-procedures"
		---help---
		  -nbap, --no-blank-lines-after-procedures
		  Do not force blank lines after procedure bodies.

	config LEAVE_OPTIONAL_BLANK_LINES
		bool "--leave-optional-blank-lines"
		---help---
		  -nsob, --leave-optional-blank-lines
		  Do not swallow optional blank lines.

	config SWALLOW_OPTIONAL_BLANK_LINES
		bool "--swallow-optional-blank-lines"
		---help---
		  -sob, --swallow-optional-blank-lines
		  Swallow optional blank lines.

endif

# BREAKING LONG LINES OPTIONS

menuconfig BREAKING_LONG_LINES_OPTIONS
	bool "BREAKING LONG LINES"
	default y
	---help---
	  BREAKING LONG LINES
	  
	  With the option "-ln", or "--line-lengthn", it is possible to specify the maximum length of a line of C code, not including possible comments that follow it.

	  When lines become longer than the specified line length, poem tries to break the line at a logical place.

	  Currently there are two options that allow one to interfere with the algorithm that determines where to break a line.

	  The "-bbo" option causes poem to prefer to break long lines before the boolean operators && and ||.
	  
	  The "-nbbo" option causes poem not have that preference. For example, the default option "-bbo" (together with "--line-length60" and "--ignore-newlines") makes code look like this:

	      if (mask
		  && ((mask[0] == '\0')
		      || (mask[1] == '\0'
			  && ((mask[0] == '0') || (mask[0] == '*')))))

	  Using the option "-nbbo" will make it look like this:

	      if (mask &&
		  ((mask[0] == '\0') ||
		   (mask[1] == '\0' &&
		    ((mask[0] == '0') || (mask[0] == '*')))))

	  The default "-hnl", however, honours newlines in the input file by giving them the highest possible priority to break lines at.
	  
	  For example, when the input file looks like this:

	      if (mask
		  && ((mask[0] == '\0')
		  || (mask[1] == '\0' && ((mask[0] == '0') || (mask[0] == '*')))))

	  then using the option "-hnl", or "--honour-newlines", together with the previously mentioned "-nbbo" and "--line-length60", will cause the output not to be what is given in the last example but instead will prefer to break at the positions where the code was broken in the input file:

	      if (mask
		  && ((mask[0] == '\0')
		      || (mask[1] == '\0' &&
			  ((mask[0] == '0') || (mask[0] == '*')))))

	  The idea behind this option is that lines which are too long, but are already broken up, will not be touched by poem.
	  
	  Really messy code should be run through poem at least once using the "--ignore-newlines" option though.

if BREAKING_LONG_LINES_OPTIONS

	config BREAK_BEFORE_BOOLEAN_OPERATOR
		bool "--break-before-boolean-operator"
		---help---
		  -bbo, --break-before-boolean-operator
		  Prefer to break long lines before boolean operators.

	config HONOUR_NEWLINES
		bool "--honour-newlines"
		---help---
		  -hnl, --honour-newlines
		  Prefer to break long lines at the position of newlines in the input.

	menuconfig LINE_LENGTH
		bool "--line-length"
		default y
		---help---
		  -ln, --line-lengthn
		  Set maximum line length for non-comment lines to n.

		if LINE_LENGTH
		config LINE_LENGTHN
			string "--line-lengthn"
			default "78"
			---help---
			  -ln, --line-lengthn
			  Set maximum line length for non-comment lines to n.
		endif

	config BREAK_AFTER_BOOLEAN_OPERATOR
		bool "--break-after-boolean-operator"
		---help---
		  -nbbo, --break-after-boolean-operator
		  Do not prefer to break long lines before boolean operators.

	config IGNORE_NEWLINES
		bool "--ignore-newlines"
		---help---
		  -nhnl, --ignore-newlines
		  Do not prefer to break long lines at the position of newlines in the input.

endif

# DECLARATIONS OPTIONS

menuconfig DECLARATIONS_OPTIONS
	bool "DECLARATIONS"
	default y
	---help---
	  DECLARATIONS

	  By default poem will line up identifiers, in the column specified by the "-di" option. For example, "-di16" makes things look like:

	    int 	    foo;
	    char	   *bar;

	  Using a small value (such as one or two) for the "-di" option can be used to cause the identifiers to be placed in the first available position;
	  
	  for example:

	    int foo;
	    char *bar;

	  The value given to the "-di" option will still affect variables which are put on separate lines from their types, for example "-di2" will lead to:

	    int
	      foo;

	  If the "-bc" option is specified, a newline is forced after each comma in a declaration. For example,

	    int a,
	      b,
	      c;

	  With the "-nbc" option this would look like

	    int a, b, c;

	  The "-bfda" option causes a newline to be forced after the comma separating the arguments of a function declaration.
	  
	  The arguments will appear at one indention level deeper than the function declaration.
	  
	  This is particularly helpful for functions with long argument lists. The option "-bfde" causes a newline to be forced before the closing bracket of the function declaration. For both options the "n" setting is the default: -nbdfa and -nbdfe.

	  For example,

	    void foo (int arg1, char arg2, int *arg3, long arg4, char arg5);
       
	  With the "-bfda" option this would look like

	    void foo (
		int arg1,
		char arg2,
		int *arg3,
		long arg4,
		char arg5);

	  With, in addition, the "-bfde" option this would look like

	    void foo (
		int arg1,
		char arg2,
		int *arg3,
		long arg4,
		char arg5
		);

	  The "-psl" option causes the type of a procedure being defined to be placed on the line before the name of the procedure.
	  
	  This style is required for the etags program to work correctly, as well as some of the c-mode functions of Emacs.

	  You must use the "-T" option to tell poem the name of all the typenames in your program that are defined by typedef.
	  
	  "-T" can be specified more than once, and all names specified are used. For example, if your program contains

	    typedef unsigned long CODE_ADDR;
	    typedef enum {red, blue, green} COLOR;

	  you would use the options "-T CODE_ADDR -T COLOR".


	  The "-brs" or "-bls" option specifies how to format braces in struct declarations. The "-brs" option formats braces like this:

	    struct foo {
	      int x;
	    };

	  The "-bls" option formats them like this:

	    struct foo
	    {
	      int x;
	    };


	  Similarly to the structure brace "-brs" and "-bls" options,
	    the function brace options "-brf" or "-blf" specify how to format the braces in function definitions. The "-brf" option formats braces like this:

	    int one(void) {
	      return 1;
	    };

	  The "-blf" option formats them like this:

	    int one(void)
	    {
	      return 1;
	    };

if DECLARATIONS_OPTIONS

	config BLANK_LINES_AFTER_COMMAS
		bool "--blank-lines-after-commas"
		---help---
		  -bc, --blank-lines-after-commas
		  Force newline after comma in declaration.

	config BRACES_AFTER_FUNC_DEF_LINE
		bool "--braces-after-func-def-line"
		---help---
		  -blf, --braces-after-func-def-line
		  Put braces on line following function definition line.

	config BRACES_AFTER_STRUCT_DECL_LINE
		bool "--braces-after-struct-decl-line"
		---help---
		  -bls, --braces-after-struct-decl-line
		  Put braces on the line after struct declaration lines.

	config BRACES_ON_FUNC_DEF_LINE
		bool "--braces-on-func-def-line"
		---help---
		  -brf, --braces-on-func-def-line
		  Put braces on function definition line.

	config BRACES_ON_STRUCT_DECL_LINE
		bool "--braces-on-struct-decl-line"
		---help---
		  -brs, --braces-on-struct-decl-line
		  Put braces on struct declaration line.

	config BREAK_FUNCTION_DECL_ARGS
		bool "--break-function-decl-args"
		---help---
		  -bfda, --break-function-decl-args
		  Break the line before all arguments in a declaration.

	config BREAK_FUNCTION_DECL_ARGS_END
		bool "--break-function-decl-args-end"
		---help---
		  -bfde, --break-function-decl-args-end
		  Break the line after the last argument in a declaration.

	config LEFT_JUSTIFY_DECLARATIONS
		bool "--left-justify-declarations"
		---help---
		  -dj, --left-justify-declarations
		  If -cd 0 is used then comments after declarations are left justified behind the declaration.

	menuconfig DECLARATION_INDENTATION
		bool "--declaration-indentation"
		default y
		---help---
		  -din, --declaration-indentationn
		  Put variables in column n.

		if DECLARATION_INDENTATION
		config DECLARATION_INDENTATIONN
			string "--declaration-indentationn"
			default "2"
			---help---
			  -din, --declaration-indentationn
			  Put variables in column n.
		endif

	config NO_BLANK_LINES_AFTER_COMMAS
		bool "--no-blank-lines-after-commas"
		---help---
		  -nbc, --no-blank-lines-after-commas
		  Do not force newlines after commas in declarations.

	config DONT_BREAK_FUNCTION_DECL_ARGS
		bool "--dont-break-function-decl-args"
		---help---
		  -nbfda, --dont-break-function-decl-args
		  Don"t put each argument in a function declaration on a separate line.

	config DONT_LEFT_JUSTIFY_DECLARATIONS
		bool "--dont-left-justify-declarations"
		---help---
		  -ndjn, --dont-left-justify-declarations
		  Comments after declarations are treated the same as comments after other statements.

	config DONT_BREAK_PROCEDURE_TYPE
		bool "--dont-break-procedure-type"
		---help---
		  -npsl, --dont-break-procedure-type
		  Put the type of a procedure on the same line as its name.

	config PROCNAMES_START_LINES
		bool "--procnames-start-lines"
		---help---
		  -psl, --procnames-start-lines
		  Put the type of a procedure on the line before its name.

	config T
		bool "-T"
		---help---
		  -T
		  Tell poem the name of typenames.

endif

# STATEMENTS OPTIONS

menuconfig STATEMENTS_OPTIONS
	bool "STATEMENTS"
	default y
	---help---
	  STATEMENTS
	  
	  The "-br" or "-bl" option specifies how to format braces.

	  The "-br" option formats statement braces like this:

	    if (x > 0) {
	      x--;
	    }

	  The "-bl" option formats them like this:

	    if (x > 0)
	      {
		x--;
	      }

	  If you use the "-bl" option, you may also want to specify the "-bli" option.  This option specifies the number of  spaces  by  which  braces  are  indented. "-bli2", the default, gives the result shown above.  "-bli0" results in the following:

	    if (x > 0)
	    {
	      x--;
	    }

	  If  you	are  using the "-br" option, you probably want to also use the "-ce" option.  This causes the else in an if-then-else construct to cuddle up to the immediately preceding "}".  For example, with "-br -ce" you get the following:

	    if (x > 0) {
	      x--;
	    } else {
	      fprintf (stderr, "...something wrong?\n");
	    }

	  With "-br -nce" that code would appear as

	    if (x > 0) {
	      x--;
	    }
	    else {
	      fprintf (stderr, "...something wrong?\n");
	    }

	  This causes the while in a do-while loop to cuddle up to the immediately preceding "}".	For example, with "-cdw" you get the following:

	    do {
	      x--;
	    } while (x);

	  With "-ncdw" that code would appear as

	    do {
	      x--;
	    }
	    while (x);

	  The "-cli" option specifies the number of spaces that case labels should be indented to the right of the containing switch statement.

	  The default gives code like:

	    switch (i)
	      {
	      case 0:
		break;
	      case 1:
		{
		  ++i;
		}
	      default:
		break;
	      }

	  Using the "-cli2" that would become:

	    switch (i)
	      {
		case 0:
		  break;
		case 1:
		  {
		    ++i;
		  }
		default:
		  break;
	      }

	  The indentation of the braces below a case statement can be controlled with the "-cbin" option.	For example, using "-cli2 -cbi0" results in:

	    switch (i)
	      {
		case 0:
		  break;
		case 1:
		{
		  ++i;
		}
		default:
		  break;
	      }

	  If a semicolon is on the same line as a for or while statement, the "-ss" option will cause a space to be placed before the semicolon.  This emphasizes the semicolon, making it clear that the body of the for or while statement is an empty statement.  "-nss" disables this feature.

	  The  "-pcs"  option  causes  a space to be placed between the name of the procedure being called and the "(" (for example, puts ("Hi");.  The "-npcs" option would give puts("Hi");).


	  If the "-cs" option is specified, poem puts a space between a cast operator and the object to be cast. The "-ncs" ensures that there is no  space  between the  cast operator and the object. Remember that poem only knows about the standard C data types and so cannot recognise user-defined types in casts. Thus(mytype)thing is not treated as a cast.

	  The "-bs" option ensures that there is a space between the keyword sizeof and its argument.  In some versions, this is known as the "Bill_Shannon" option.

	  The "-saf" option forces a space between a for and the following parenthesis.  This is the default.

	  The "-sai" option forces a space between a if and the following parenthesis.  This is the default.

	  The "-saw" option forces a space between a while and the following parenthesis.	This is the default.

	  The "-prs" option causes all parentheses to be separated with a space from whatever is between them.  For example, using "-prs" results in code like:

	      while ( ( e_code - s_code ) < ( dec_ind - 1 ) )
		{
		  set_buf_break ( bb_dec_ind );
		  *e_code++ = ' ';
		}

if STATEMENTS_OPTIONS

	config BRACES_AFTER_IF_LINE
		bool "--braces-after-if-line"
		---help---
		  -bl, --braces-after-if-line
		  Put braces on line after if, etc.

	menuconfig BRACE_INDENT
		bool "--brace-indent"
		default y
		---help---
		  -blin, --brace-indentn
		  Indent braces n spaces.

		if BRACE_INDENT
		config BRACE_INDENTN
			string "--brace-indentn"
			default "2"
			---help---
			  -blin, --brace-indentn
			  Indent braces n spaces.
		endif

	config BRACES_ON_IF_LINE
		bool "--braces-on-if-line"
		---help---
		  -br, --braces-on-if-line
		  Put braces on line with if, etc.

	config BLANK_BEFORE_SIZEOF
		bool "--blank-before-sizeof"
		---help---
		  -bs, --Bill-Shannon, --blank-before-sizeof
		  Put a space between sizeof and its argument.

	menuconfig CASE_BRACE_INDENTATION
		bool "--case-brace-indentation"
		default y
		---help---
		  -cbin, --case-brace-indentationn
		  Indent braces after a case label N spaces.

		if CASE_BRACE_INDENTATION
		config CASE_BRACE_INDENTATIONN
			string "--case-brace-indentationn"
			default "2"
			---help---
			  -cbin, --case-brace-indentationn
			  Indent braces after a case label N spaces.
		endif

	menuconfig CONTINUATION_INDENTATION
		bool "--continuation-indentation"
		default y
		---help---
		  -cin, --continuation-indentationn
		  Continuation indent of n spaces.

		if CONTINUATION_INDENTATION
		config CONTINUATION_INDENTATIONN
			string "--continuation-indentationn"
			default "2"
			---help---
			  -cin, --continuation-indentationn
			  Continuation indent of n spaces.
		endif

	menuconfig CASE_INDENTATION
		bool "--case-indentation"
		default y
		---help---
		  -clin, --case-indentationn
		  Case label indent of n spaces.

		if CASE_INDENTATION
		config CASE_INDENTATIONN
			string "--case-indentationn"
			default "2"
			---help---
			  -clin, --case-indentationn
			  Case label indent of n spaces.
		endif

	config SPACE_AFTER_CAST
		bool "--space-after-cast"
		---help---
		  -cs, --space-after-cast
		  Put a space after a cast operator.

	config DONT_CUDDLE_DO_WHILE
		bool "--dont-cuddle-do-while"
		---help---
		  -ncdw, --dont-cuddle-do-while
		  Do not cuddle } and the while of a do {} while;.

	config DONT_CUDDLE_ELSE
		bool "--dont-cuddle-else"
		---help---
		  -nce, --dont-cuddle-else
		  Do not cuddle } and else.

	config NO_SPACE_AFTER_CASTS
		bool "--no-space-after-casts"
		---help---
		  -ncs, --no-space-after-casts
		  Do not put a space after cast operators.

	config DONT_LINE_UP_PARENTHESES
		bool "--dont-line-up-parentheses"
		---help---
		  -nlp, --dont-line-up-parentheses
		  Do not line up parentheses.

	config NO_SPACE_AFTER_FUNCTION_CALL_NAMES
		bool "--no-space-after-function-call-names"
		---help---
		  -npcs, --no-space-after-function-call-names
		  Do not put space after the function in function calls.

	config NO_SPACE_AFTER_PARENTHESES
		bool "--no-space-after-parentheses"
		---help---
		  -nprs, --no-space-after-parentheses
		  Do not put a space after every '(' and before every ')'.

	config NO_SPACE_AFTER_FOR
		bool "--no-space-after-for"
		---help---
		  -nsaf, --no-space-after-for
		  Do not put a space after every for.

	config NO_SPACE_AFTER_IF
		bool "--no-space-after-if"
		---help---
		  -nsai, --no-space-after-if
		  Do not put a space after every if.

	config NO_SPACE_AFTER_WHILE
		bool "--no-space-after-while"
		---help---
		  -nsaw, --no-space-after-while
		  Do not put a space after every while.

	config DONT_SPACE_SPECIAL_SEMICOLON
		bool "--dont-space-special-semicolon"
		---help---
		  -nss, --dont-space-special-semicolon
		  Do not force a space before the semicolon after certain statements.	Disables "-ss".

	config SPACE_AFTER_PROCEDURE_CALLS
		bool "--space-after-procedure-calls"
		---help---
		  -pcs, --space-after-procedure-calls
		  Insert a space between the name of the procedure being called and the "(".

	menuconfig PAREN_INDENTATION
		bool "--paren-indentation"
		default y
		---help---
		  -pin, --paren-indentationn
		  Specify the extra indentation per open parentheses "(" when a statement is broken.

		if PAREN_INDENTATION
		config PAREN_INDENTATIONN
			string "--paren-indentationn"
			default "2"
			---help---
			  -pin, --paren-indentationn
			  Specify the extra indentation per open parentheses "(" when a statement is broken.
		endif

	config SPACE_AFTER_PARENTHESES
		bool "--space-after-parentheses"
		---help---
		  -prs, --space-after-parentheses
		  Put a space after every "(" and before every ")".

	config SPACE_AFTER_FOR
		bool "--space-after-for"
		---help---
		  -saf, --space-after-for
		  Put a space after each for.

	config SPACE_AFTER_IF
		bool "--space-after-if"
		---help---
		  -sai, --space-after-if
		  Put a space after each if.

	config SPACE_AFTER_WHILE
		bool "--space-after-while"
		---help---
		  -saw, --space-after-while
		  Put a space after each while.

	menuconfig STRUCT_BRACE_INDENTATION
		bool "--struct-brace-indentation"
		default y
		---help---
		  -sbin, --struct-brace-indentationn
		  Indent braces of a struct, union or enum N spaces.

		if STRUCT_BRACE_INDENTATION
		config STRUCT_BRACE_INDENTATIONN
			string "--struct-brace-indentationn"
			default "2"
			---help---
			  -sbin, --struct-brace-indentationn
			  Indent braces of a struct, union or enum N spaces.
		endif

	config SPACE_SPECIAL_SEMICOLON
		bool "--space-special-semicolon"
		---help---
		  -ss, --space-special-semicolon
		  On one-line for and while statements, force a blank before the semicolon.

endif

# INDENTATION OPTIONS

menuconfig INDENTATION_OPTIONS
	bool "INDENTATION"
	default y
	---help---
	  INDENTATION
	  
	  One  issue  in  the formatting of code is how far each line should be indented from the left margin.
	  
	  When the beginning of a statement such as if or for is encountered, the indentation level is increased by the value specified by the "-i" option.  
	  
	  For example, use "-i8" to specify an eight character indentation for  each  level.
	  
	  When a statement is broken across two lines, the second line is indented by a number of additional spaces specified by the "-ci" option.

	  "-ci" defaults to 0.  However, if the "-lp" option is specified, and a line has a left parenthesis which is not closed on that line, then continuation lines will  be lined up to start at the character position just after the left parenthesis.  This processing also applies to "[" and applies to "{" when it occurs in initialization lists.  For example, a piece of continued code might look like this with "-nlp -ci3" in effect:

	      p1 = first_procedure (second_procedure (p2, p3),
		 third_procedure (p4, p5));

	  With "-lp" in effect the code looks somewhat clearer:

	      p1 = first_procedure (second_procedure (p2, p3),
				    third_procedure (p4, p5));

	  When a statement is broken in between two or more paren pairs (...), each extra pair causes the indentation level extra indentation:

	    if ((((i < 2 &&
		    k > 0) || p == 0) &&
		q == 1) ||
	      n = 0)

	  The option "-ipN" can be used to set the extra offset per paren.  For instance, "-ip0" would format the above as:

	    if ((((i < 2 &&
	      k > 0) || p == 0) &&
	      q == 1) ||
	      n = 0)

	  poem assumes that tabs are placed at regular intervals of both input and output character streams.
		  
	  These intervals are by default 8 columns wide, but may be changed by the "-ts" option. Tabs are treated as the equivalent number of spaces.

	  The  indentation  of  type  declarations in old-style function definitions is controlled by the "-ip" parameter.  This is a numeric parameter specifying how many spaces to poem type declarations.  For example, the default "-ip5" makes definitions look like this:

	    char *
	    create_world (x, y, scale)
		 int x;
		 int y;
		 float scale;
	    {
	      . . .
	    }

	  For compatibility with other versions of poem, the option "-nip" is provided, which is equivalent to "-ip0".

	  ANSI C allows white space to be placed on preprocessor command lines between the character "#" and the command name.  By default, poem removes this space, but specifying the "-lps" option directs poem to leave this space unmodified. The option "-ppi" overrides  "-nlps" and  "-lps".

	  This  option can be used to request that preprocessor conditional statements can be poemed by to given number of spaces, for example with the option "-ppi3"

	    #if X
	    #if Y
	    #define Z 1
	    #else
	    #define Z 0
	    #endif
	    #endif

	  becomes

	    #if X
	    #	if Y
	    #	   define Z 1
	    #	else
	    #	   define Z 0
	    #	endif
	    #endif

	  This option sets the offset at which a label (except case labels) will be positioned. If it is set to zero or a positive number, this indicates how far from the left margin to poem a label. If it is set to a negative number, this indicates how far back from the current poem level to place the label.
	  
	  The default setting is -2 which matches the behaviour of earlier versions of poem.  Note that this parameter does not affect the placing of case  labels; see the "-cli" parameter for that. For example with the option "-il 1"

	    group
	    function()
	    {
		if (do_stuff1() == ERROR)
		    goto cleanup1;

		if (do_stuff2() == ERROR)
		    goto cleanup2;

		return SUCCESS;

	      cleanup2:
		do_cleanup2();

	      cleanup1:
		do_cleanup1();

		return ERROR;
	    }

	  becomes

	    group
	    function()
	    {
		if (do_stuff1() == ERROR)
		    goto cleanup1;

		if (do_stuff2() == ERROR)
		    goto cleanup2;

		return SUCCESS;

	     cleanup2:
		do_cleanup2();

	     cleanup1:
		do_cleanup1();

		return ERROR;
	    }

if INDENTATION_OPTIONS

	config USE_TABS
		bool "--use-tabs"
		---help---
		  -ut, --use-tabs
		  Use tabs. This is the default.

	menuconfig INDENT_LEVEL
		bool "--indent-leveln"
		default y
		---help---
		  -in, --indent-leveln
		  Set indentation level to n spaces.

		if INDENT_LEVEL
		config INDENT_LEVELN
			string "--indent-leveln"
			default "2"
			---help---
			  -in, --indent-leveln
			  Set indentation level to n spaces.
		endif

	menuconfig INDENT_LABEL
		bool "--indent-label"
		default y
		---help---
		  -iln, --indent-labeln
		  Set offset for labels to column n.

		if INDENT_LABEL
		config INDENT_LABELN
			string "--indent-label"
			default "2"
			---help---
			  -iln, --indent-labeln
			  Set offset for labels to column n.
		endif

	menuconfig PARAMETER_INDENTATION
		bool "--parameter-indentation"
		default y
		---help---
		  -ipn, --parameter-indentationn
		  Indent parameter types in old-style function definitions by n spaces.

		if PARAMETER_INDENTATION
		config PARAMETER_INDENTATIONN
			string "--parameter-indentationn"
			default "2"
			---help---
			  -ipn, --parameter-indentationn
			  Indent parameter types in old-style function definitions by n spaces.
		endif

	config CONTINUE_AT_PARENTHESES
		bool "--continue-at-parentheses"
		---help---
		  -lp, --continue-at-parentheses
		  Line up continued lines at parentheses.

	config LEAVE_PREPROCESSOR_SPACE
		bool "--leave-preprocessor-space"
		---help---
		  -lps, --leave-preprocessor-space
		  Leave space between "#" and preprocessor directive.

	config NO_PARAMETER_INDENTATION
		bool "--no-parameter-indentation"
		---help---
		  -nip, --no-parameter-indentation
		  Zero width indentation for parameters.

	config NO_TABS
		bool "--no-tabs"
		---help---
		  -nut, --no-tabs
		  Use spaces instead of tabs.

	menuconfig PREPROCESSOR_INDENTATION
		bool "--preprocessor-indentation"
		default y
		---help---
		  -ppin, --preprocessor-indentationn
		  Specify the indentation for preprocessor conditional statements.

		if PREPROCESSOR_INDENTATION
		config PREPROCESSOR_INDENTATIONN
			string "--preprocessor-indentationn"
			default "2"
			---help---
			  -ppin, --preprocessor-indentationn
			  Specify the indentation for preprocessor conditional statements.
		endif

	menuconfig TAB_SIZE
		bool "--tab-size"
		default y
		---help---
		  -tsn, --tab-sizen
		  Set tab size to n spaces.

		if TAB_SIZE
		config TAB_SIZEN
			string "--tab-sizen"
			default "2"
			---help---
			  -tsn, --tab-sizen
			  Set tab size to n spaces.
		endif

endif

# COMMENTS OPTIONS

menuconfig COMMENTS_OPTIONS
	bool "COMMENTS"
	default y
	---help---
	  COMMENTS
	  
	  poem  formats both  C and C++ comments. C comments are begun with "/*", terminated with "*/" and may contain newline characters. C++ comments begin with the delimiter "//" and end at the newline.

	  poem handles comments differently depending upon their context. poem attempts to distinguish between comments which follow statements, comments  which follow declarations, comments following preprocessor directives, and comments which are not preceded by code of any sort, i.e., they begin the text of the line (although not necessarily in column 1).

	  poem further distinguishes between comments found outside of procedures and aggregates, and those found within them. In particular, comments beginning a line found within a procedure will be indented to the column at which code is currently indented. The exception to this is a comment beginning in the leftmost column;  such a comment is output at that column.

	  poem attempts to leave boxed comments unmodified. The general idea of such a comment is that it is enclosed in a rectangle or ""box"" of stars  or  dashes to visually set it apart. More precisely, boxed comments are defined as those in which the initial "/*" is followed immediately by the character "*", "=", "_", or "-", or those in which the beginning comment delimiter ("/*") is on a line by itself, and the following line begins with a "*" in the same column as the star of the opening delimiter.

	  Examples of boxed comments are:

	    /**********************
	     * Comment in a box!! *
	     **********************/

		   /*
		    * A different kind of scent,
		    * for a different kind of comment.
		    */

	  poem attempts to leave boxed comments exactly as they are found in the source file.	Thus the indentation of the comment is unchanged, and its length is not checked in any way. The only alteration made is that an embedded tab character may be converted into the appropriate number of spaces.

	  If the "-bbb" option is specified, all such boxed comments will be preceded by a blank line, unless such a comment is preceded by code.

	  Comments which are not boxed comments may be formatted, which means that the line is broken to fit within a right margin and  left-filled  with	whitespace.

	  Single  newlines  are  equivalent  to  a space, but blank lines (two or more newlines in a row) are taken to mean a paragraph break. Formatting of comments which begin after the first column is enabled with the "-fca" option. To format those beginning in column one, specify "-fc1". Such formatting is disabled by default.

	  The right margin for formatting defaults to 78, but may be changed with the "-lc" option.  If the margin specified does not allow the comment to be printed, the margin will be automatically extended for the duration of that comment.  The margin is not respected if the comment is not being formatted.

	  If the comment begins a line (i.e., there is no program text to its left), it will be indented to the column it was found in unless the comment is within  a block  of  code.   In  that  case, such a comment will be aligned with the indented code of that block (unless the comment began in the first column).  This alignment may be affected by the "-d" option, which specifies an amount by which such comments are moved to the left, or  unindented.   For  example, "-d2" places  comments  two spaces to the left of code.  By default, comments are aligned with code, unless they begin in the first column, in which case they are left there by default --- to get them aligned with the code, specify "-fc1".

	  Comments to the right of code will appear by default in column 33. This may be changed with one of three options. "-c" will specify the  column  for  comments following  code,	"-cd"  specifies the column for comments following declarations, and "-cp" specifies the column for comments following preprocessor directives #else and #endif. "-dj" together with "-cd0" can be used to suppress alignment of comments to the right of declarations, causing the	comment to follow one tabstop from the end of the declaration. Normally "-cd0" causes "-c" to become effective.

	  If  the	code  to  the  left of the comment exceeds the beginning column, the comment column will be extended to the next tabstop column past the end of the code, or in the case of preprocessor directives, to one space past the end of the directive. This extension lasts only for the output of that particular comment.

	  The "-cdb" option places the comment delimiters on blank lines.	Thus, a single line comment like /* Loving hug */ can be transformed into:

	    /*
	       Loving hug
	     */

	  Stars can be placed at the beginning of multi-line comments with the "-sc" option.  Thus, the single-line comment above can be transformed (with "-cdb -sc") into:

	    /*
	     * Loving hug
	     */

if COMMENTS_OPTIONS

	menuconfig COMMENT_INDENTATION
		bool "--comment-indentation"
		default y
		---help---
		  -cn, --comment-indentationn
		  Put comments to the right of code in column n.

		if COMMENT_INDENTATION
		config COMMENT_INDENTATIONN
			string "--comment-indentationn"
			default "2"
			---help---
			  -cn, --comment-indentationn
			  Put comments to the right of code in column n.
		endif

	menuconfig DECLARATION_COMMENT_COLUMN
		bool "--declaration-comment-column"
		default y
		---help---
		  -cdn, --declaration-comment-columnn
		  Put comments to the right of the declarations in column n.

		if DECLARATION_COMMENT_COLUMN
		config DECLARATION_COMMENT_COLUMNN
			string "--declaration-comment-columnn"
			default "2"
			---help---
			  -cdn, --declaration-comment-columnn
			  Put comments to the right of the declarations in column n.
		endif

	config COMMENT_DELIMITERS_ON_BLANK_LINES
		bool "--comment-delimiters-on-blank-lines"
		---help---
		  -cdb, --comment-delimiters-on-blank-lines
		  Put comment delimiters on blank lines.

	config CUDDLE_DO_WHILE
		bool "--cuddle-do-while"
		---help---
		  -cdw, --cuddle-do-while
		  Cuddle while of do {} while; and preceding "}".

	config CUDDLE_ELSE
		bool "--cuddle-else"
		---help---
		  -ce, --cuddle-else
		  Cuddle else and preceding "}".

	menuconfig ELSE_ENDIF_COLUMN
		bool "--else-endif-column"
		default y
		---help---
		  -cpn, --else-endif-columnn
		  Put comments to the right of #else and #endif statements in column n.

		if ELSE_ENDIF_COLUMN
		config ELSE_ENDIF_COLUMNN
			string "--else-endif-columnn"
			default "2"
			---help---
			  -cpn, --else-endif-columnn
			  Put comments to the right of #else and #endif statements in column n.
		endif

	menuconfig LINE_COMMENTS_INDENTATION
		bool "--line-comments-indentation"
		default y
		---help---
		  -dn, --line-comments-indentationn
		  Set indentation of comments not to the right of code to n spaces.

		if LINE_COMMENTS_INDENTATION
		config LINE_COMMENTS_INDENTATIONN
			string "--line-comments-indentationn"
			default "2"
			---help---
			  -dn, --line-comments-indentationn
			  Set indentation of comments not to the right of code to n spaces.
		endif

	config FORMAT_FIRST_COLUMN_COMMENTS
		bool "--format-first-column-comments"
		---help---
		  -fc1, --format-first-column-comments
		  Format comments in the first column.

	config FORMAT_ALL_COMMENTS
		bool "--format-all-comments"
		---help---
		  -fca, --format-all-comments
		  Do not disable all formatting of comments.

	menuconfig COMMENT_LINE_LENGTH
		bool "--comment-line-length"
		default y
		---help---
		  -lcn, --comment-line-lengthn
		  Set maximum line length for comment formatting to n.

		if COMMENT_LINE_LENGTH
		config COMMENT_LINE_LENGTHN
			string "--comment-line-lengthn"
			default "2"
			---help---
			  -lcn, --comment-line-lengthn
			  Set maximum line length for comment formatting to n.
		endif

	config NO_COMMENT_DELIMITERS_ON_BLANK_LINES
		bool "--no-comment-delimiters-on-blank-lines"
		---help---
		  -ncdb, --no-comment-delimiters-on-blank-lines
		  Do not put comment delimiters on blank lines.

	config DONT_FORMAT_FIRST_COLUMN_COMMENTS
		bool "--dont-format-first-column-comments"
		---help---
		  -nfc1, --dont-format-first-column-comments
		  Do not format comments in the first column as normal.

	config DONT_FORMAT_COMMENTS
		bool "--dont-format-comments"
		---help---
		  -nfca, --dont-format-comments
		  Do not format any comments.

	config DONT_STAR_COMMENTS
		bool "--dont-star-comments"
		---help---
		  -nsc, --dont-star-comments
		  Do not put the "*" character at the left of comments.

	config START_LEFT_SIDE_OF_COMMENTS
		bool "--start-left-side-of-comments"
		---help---
		  -sc, --start-left-side-of-comments
		  Put the "*" character at the left of comments.

endif

# COMMON STYLES OPTIONS

menuconfig COMMON_STYLES_OPTIONS
	bool "COMMON STYLES"
	default y
	---help---
	  COMMON STYLES

	  There are several common styles of C code, including the GNU style, the Kernighan & Ritchie style, and the original Berkeley style.
	  
	  A style may be selected with a single background option, which specifies a set of values for all other options.
	  
	  However, explicitly specified options always override options implied by a background option.

	  Option settings which correspond to the GNU style are:

	    -nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2
	    -ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -nprs -psl -saf -sai
	    -saw -nsc -nsob

	  The GNU coding style is that preferred by the GNU project.
	  
	  It is the style that the GNU Emacs C mode encourages and which is used in the C portions of GNU Emacs.
	  (People  interested in writing programs for Project GNU should get a copy of "The GNU Coding Standards", which also covers semantic and portability issues such as memory usage, the size of integers, etc.)

	  The Kernighan & Ritchie style is used throughout their well-known book "The C Programming Language".
	  
	  It is enabled with the "-kr" option. The Kernighan & Ritchie style corresponds to the following set of options:

	    -nbad -bap -bbo -nbc -br -brs -c33 -cd33 -ncdb -ce -ci4 -cli0
	    -cp33 -cs -d0 -di1 -nfc1 -nfca -hnl -i4 -ip0 -l75 -lp -npcs
	    -nprs -npsl -saf -sai -saw -nsc -nsob -nss

	  Kernighan  &  Ritchie  style  does not put comments to the right of code in the same column at all times
	  
	  (nor does it use only one space to the right of the code), so for this style poem has arbitrarily chosen column 33.
	  
	  The style of the original Berkeley poem may be obtained by specifying "-orig" (or by specifying "--original", using the long option name).
	  
	  This style is equivalent to the following settings:

	    -nbad -nbap -bbo -bc -br -brs -c33 -cd33 -cdb -ce -ci4 -cli0
	    -cp33 -di16 -fc1 -fca -hnl -i4 -ip4 -l75 -lp -npcs -nprs -psl
	    -saf -sai -saw -sc -nsob -nss -ts8

	  The  Linux style is used in the linux kernel code and drivers. Code generally has to follow the Linux coding style to be accepted.
	  
	  This style is equivalent to the following settings:

	    -nbad -bap -nbc -bbo -hnl -br -brs -c33 -cd33 -ncdb -ce -ci4
	    -cli0 -d0 -di1 -nfc1 -i8 -ip0 -l80 -lp -npcs -nprs -npsl -sai
	    -saf -saw -ncs -nsc -sob -nfca -cp33 -ss -ts8 -il1

if COMMON_STYLES_OPTIONS

	config GNU_STYLE
		bool "--gnu-style"
		---help---
		  -gnu, --gnu-style
		  Use GNU coding style.  This is the default.

	config K_AND_R_STYLE
		bool "--k-and-r-style"
		---help---
		  -kr, --k-and-r-style
		  Use Kernighan & Ritchie coding style.

	config ORIGINAL
		bool "--original"
		---help---
		  -orig, --original
		  Use the original Berkeley coding style.

	config LINUX_STYLE
		bool "--linux-style"
		---help---
		  -linux, --linux-style
		  Use Linux coding style.

endif

# INVOKING POEM OPTIONS

menuconfig INVOKING_POEM_OPTIONS
	bool "INVOKING POEM"
	default y
	---help---

if INVOKING_POEM_OPTIONS

	config IGNORE_PROFILE
		bool "--ignore-profile"
		---help---
		  -npro, --ignore-profile
		  Do not read ".poem.pro" files.

	config STANDARD_OUTPUT
		bool "--standard-output"
		---help---
		  -st, --standard-output
		  Write to standard output.

endif

# MISCELLANEOUS OPTIONS.

menuconfig MISCELLANEOUS_OPTIONS
	bool "MISCELLANEOUS"
	default y
	---help---
	  MISCELLANEOUS OPTIONS

	  To find out what version of poem you have, use the command poem -version. This will report the version number of poem, without doing any of the normal processing.

	  The "-v" option can be used to turn on verbose mode. When in verbose mode, poem reports when it splits one line of input into two more more lines of output, and gives some size statistics at completion.

	  The "-pmt" option causes poem to preserve the access and modification times on the output files. Using this option has the advantage that running  poem on all source and header files in a project won"t cause make to rebuild all targets. This option is only available on Operating Systems that have the POSIX utime(2) function.

if MISCELLANEOUS_OPTIONS

	config VERBOSE
		bool "--verbose"
		---help---
		  -v, --verbose
		  Enable verbose mode.

	config NO_VERBOSITY
		bool "--no-verbosity"
		---help---
		  -nv, --no-verbosity
		  Disable verbose mode.

	config VERSION
		bool "--version"
		---help---
		  -V, --version
		  Output the version number of poem.

	config PRESERVE_MTIME
		bool "--preserve-mtime"
		---help---
		  -pmt, --preserve-mtime
		  Preserve access and modification times on output files.

endif
